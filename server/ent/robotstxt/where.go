// Code generated by entc, DO NOT EDIT.

package robotstxt

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/paulvollmer/robotstxt-datastore/server/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// Scheme applies equality check predicate on the "scheme" field. It's identical to SchemeEQ.
func Scheme(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScheme), v))
	})
}

// ResponseURL applies equality check predicate on the "response_url" field. It's identical to ResponseURLEQ.
func ResponseURL(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseURL), v))
	})
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// Statuscode applies equality check predicate on the "statuscode" field. It's identical to StatuscodeEQ.
func Statuscode(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatuscode), v))
	})
}

// ResponseTime applies equality check predicate on the "response_time" field. It's identical to ResponseTimeEQ.
func ResponseTime(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHost), v))
	})
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHost), v...))
	})
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHost), v...))
	})
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHost), v))
	})
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHost), v))
	})
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHost), v))
	})
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHost), v))
	})
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHost), v))
	})
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHost), v))
	})
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHost), v))
	})
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHost), v))
	})
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHost), v))
	})
}

// SchemeEQ applies the EQ predicate on the "scheme" field.
func SchemeEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScheme), v))
	})
}

// SchemeNEQ applies the NEQ predicate on the "scheme" field.
func SchemeNEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScheme), v))
	})
}

// SchemeIn applies the In predicate on the "scheme" field.
func SchemeIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScheme), v...))
	})
}

// SchemeNotIn applies the NotIn predicate on the "scheme" field.
func SchemeNotIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScheme), v...))
	})
}

// SchemeGT applies the GT predicate on the "scheme" field.
func SchemeGT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScheme), v))
	})
}

// SchemeGTE applies the GTE predicate on the "scheme" field.
func SchemeGTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScheme), v))
	})
}

// SchemeLT applies the LT predicate on the "scheme" field.
func SchemeLT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScheme), v))
	})
}

// SchemeLTE applies the LTE predicate on the "scheme" field.
func SchemeLTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScheme), v))
	})
}

// SchemeContains applies the Contains predicate on the "scheme" field.
func SchemeContains(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScheme), v))
	})
}

// SchemeHasPrefix applies the HasPrefix predicate on the "scheme" field.
func SchemeHasPrefix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScheme), v))
	})
}

// SchemeHasSuffix applies the HasSuffix predicate on the "scheme" field.
func SchemeHasSuffix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScheme), v))
	})
}

// SchemeEqualFold applies the EqualFold predicate on the "scheme" field.
func SchemeEqualFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScheme), v))
	})
}

// SchemeContainsFold applies the ContainsFold predicate on the "scheme" field.
func SchemeContainsFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScheme), v))
	})
}

// ResponseURLEQ applies the EQ predicate on the "response_url" field.
func ResponseURLEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseURL), v))
	})
}

// ResponseURLNEQ applies the NEQ predicate on the "response_url" field.
func ResponseURLNEQ(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseURL), v))
	})
}

// ResponseURLIn applies the In predicate on the "response_url" field.
func ResponseURLIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResponseURL), v...))
	})
}

// ResponseURLNotIn applies the NotIn predicate on the "response_url" field.
func ResponseURLNotIn(vs ...string) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResponseURL), v...))
	})
}

// ResponseURLGT applies the GT predicate on the "response_url" field.
func ResponseURLGT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseURL), v))
	})
}

// ResponseURLGTE applies the GTE predicate on the "response_url" field.
func ResponseURLGTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseURL), v))
	})
}

// ResponseURLLT applies the LT predicate on the "response_url" field.
func ResponseURLLT(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseURL), v))
	})
}

// ResponseURLLTE applies the LTE predicate on the "response_url" field.
func ResponseURLLTE(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseURL), v))
	})
}

// ResponseURLContains applies the Contains predicate on the "response_url" field.
func ResponseURLContains(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResponseURL), v))
	})
}

// ResponseURLHasPrefix applies the HasPrefix predicate on the "response_url" field.
func ResponseURLHasPrefix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResponseURL), v))
	})
}

// ResponseURLHasSuffix applies the HasSuffix predicate on the "response_url" field.
func ResponseURLHasSuffix(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResponseURL), v))
	})
}

// ResponseURLEqualFold applies the EqualFold predicate on the "response_url" field.
func ResponseURLEqualFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResponseURL), v))
	})
}

// ResponseURLContainsFold applies the ContainsFold predicate on the "response_url" field.
func ResponseURLContainsFold(v string) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResponseURL), v))
	})
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBody), v))
	})
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...[]byte) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBody), v...))
	})
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...[]byte) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBody), v...))
	})
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBody), v))
	})
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBody), v))
	})
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBody), v))
	})
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v []byte) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBody), v))
	})
}

// StatuscodeEQ applies the EQ predicate on the "statuscode" field.
func StatuscodeEQ(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatuscode), v))
	})
}

// StatuscodeNEQ applies the NEQ predicate on the "statuscode" field.
func StatuscodeNEQ(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatuscode), v))
	})
}

// StatuscodeIn applies the In predicate on the "statuscode" field.
func StatuscodeIn(vs ...int32) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatuscode), v...))
	})
}

// StatuscodeNotIn applies the NotIn predicate on the "statuscode" field.
func StatuscodeNotIn(vs ...int32) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatuscode), v...))
	})
}

// StatuscodeGT applies the GT predicate on the "statuscode" field.
func StatuscodeGT(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatuscode), v))
	})
}

// StatuscodeGTE applies the GTE predicate on the "statuscode" field.
func StatuscodeGTE(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatuscode), v))
	})
}

// StatuscodeLT applies the LT predicate on the "statuscode" field.
func StatuscodeLT(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatuscode), v))
	})
}

// StatuscodeLTE applies the LTE predicate on the "statuscode" field.
func StatuscodeLTE(v int32) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatuscode), v))
	})
}

// ResponseTimeEQ applies the EQ predicate on the "response_time" field.
func ResponseTimeEQ(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseTime), v))
	})
}

// ResponseTimeNEQ applies the NEQ predicate on the "response_time" field.
func ResponseTimeNEQ(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseTime), v))
	})
}

// ResponseTimeIn applies the In predicate on the "response_time" field.
func ResponseTimeIn(vs ...int64) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResponseTime), v...))
	})
}

// ResponseTimeNotIn applies the NotIn predicate on the "response_time" field.
func ResponseTimeNotIn(vs ...int64) predicate.Robotstxt {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Robotstxt(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResponseTime), v...))
	})
}

// ResponseTimeGT applies the GT predicate on the "response_time" field.
func ResponseTimeGT(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseTime), v))
	})
}

// ResponseTimeGTE applies the GTE predicate on the "response_time" field.
func ResponseTimeGTE(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseTime), v))
	})
}

// ResponseTimeLT applies the LT predicate on the "response_time" field.
func ResponseTimeLT(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseTime), v))
	})
}

// ResponseTimeLTE applies the LTE predicate on the "response_time" field.
func ResponseTimeLTE(v int64) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseTime), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Robotstxt) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Robotstxt) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Robotstxt) predicate.Robotstxt {
	return predicate.Robotstxt(func(s *sql.Selector) {
		p(s.Not())
	})
}
