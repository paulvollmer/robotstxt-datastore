// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/paulvollmer/robotstxt-datastore/server/ent/robotstxt"
)

// RobotstxtCreate is the builder for creating a Robotstxt entity.
type RobotstxtCreate struct {
	config
	mutation *RobotstxtMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (rc *RobotstxtCreate) SetCreatedAt(t time.Time) *RobotstxtCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rc *RobotstxtCreate) SetNillableCreatedAt(t *time.Time) *RobotstxtCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the updated_at field.
func (rc *RobotstxtCreate) SetUpdatedAt(t time.Time) *RobotstxtCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (rc *RobotstxtCreate) SetNillableUpdatedAt(t *time.Time) *RobotstxtCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetHost sets the host field.
func (rc *RobotstxtCreate) SetHost(s string) *RobotstxtCreate {
	rc.mutation.SetHost(s)
	return rc
}

// SetScheme sets the scheme field.
func (rc *RobotstxtCreate) SetScheme(s string) *RobotstxtCreate {
	rc.mutation.SetScheme(s)
	return rc
}

// SetResponseURL sets the response_url field.
func (rc *RobotstxtCreate) SetResponseURL(s string) *RobotstxtCreate {
	rc.mutation.SetResponseURL(s)
	return rc
}

// SetBody sets the body field.
func (rc *RobotstxtCreate) SetBody(b []byte) *RobotstxtCreate {
	rc.mutation.SetBody(b)
	return rc
}

// SetStatuscode sets the statuscode field.
func (rc *RobotstxtCreate) SetStatuscode(i int32) *RobotstxtCreate {
	rc.mutation.SetStatuscode(i)
	return rc
}

// SetResponseTime sets the response_time field.
func (rc *RobotstxtCreate) SetResponseTime(i int64) *RobotstxtCreate {
	rc.mutation.SetResponseTime(i)
	return rc
}

// Save creates the Robotstxt in the database.
func (rc *RobotstxtCreate) Save(ctx context.Context) (*Robotstxt, error) {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := robotstxt.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := robotstxt.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Host(); !ok {
		return nil, errors.New("ent: missing required field \"host\"")
	}
	if _, ok := rc.mutation.Scheme(); !ok {
		return nil, errors.New("ent: missing required field \"scheme\"")
	}
	if _, ok := rc.mutation.ResponseURL(); !ok {
		return nil, errors.New("ent: missing required field \"response_url\"")
	}
	if _, ok := rc.mutation.Body(); !ok {
		return nil, errors.New("ent: missing required field \"body\"")
	}
	if _, ok := rc.mutation.Statuscode(); !ok {
		return nil, errors.New("ent: missing required field \"statuscode\"")
	}
	if _, ok := rc.mutation.ResponseTime(); !ok {
		return nil, errors.New("ent: missing required field \"response_time\"")
	}
	var (
		err  error
		node *Robotstxt
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RobotstxtMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RobotstxtCreate) SaveX(ctx context.Context) *Robotstxt {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RobotstxtCreate) sqlSave(ctx context.Context) (*Robotstxt, error) {
	var (
		r     = &Robotstxt{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: robotstxt.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: robotstxt.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotstxt.FieldCreatedAt,
		})
		r.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotstxt.FieldUpdatedAt,
		})
		r.UpdatedAt = value
	}
	if value, ok := rc.mutation.Host(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotstxt.FieldHost,
		})
		r.Host = value
	}
	if value, ok := rc.mutation.Scheme(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotstxt.FieldScheme,
		})
		r.Scheme = value
	}
	if value, ok := rc.mutation.ResponseURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotstxt.FieldResponseURL,
		})
		r.ResponseURL = value
	}
	if value, ok := rc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: robotstxt.FieldBody,
		})
		r.Body = value
	}
	if value, ok := rc.mutation.Statuscode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: robotstxt.FieldStatuscode,
		})
		r.Statuscode = value
	}
	if value, ok := rc.mutation.ResponseTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: robotstxt.FieldResponseTime,
		})
		r.ResponseTime = value
	}
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}
