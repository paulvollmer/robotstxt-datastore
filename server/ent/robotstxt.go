// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/paulvollmer/robotstxt-datastore/server/ent/robotstxt"
)

// Robotstxt is the model entity for the Robotstxt schema.
type Robotstxt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Scheme holds the value of the "scheme" field.
	Scheme string `json:"scheme,omitempty"`
	// ResponseURL holds the value of the "response_url" field.
	ResponseURL string `json:"response_url,omitempty"`
	// Body holds the value of the "body" field.
	Body []byte `json:"body,omitempty"`
	// Statuscode holds the value of the "statuscode" field.
	Statuscode int32 `json:"statuscode,omitempty"`
	// ResponseTime holds the value of the "response_time" field.
	ResponseTime int64 `json:"response_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Robotstxt) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // host
		&sql.NullString{}, // scheme
		&sql.NullString{}, // response_url
		&[]byte{},         // body
		&sql.NullInt64{},  // statuscode
		&sql.NullInt64{},  // response_time
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Robotstxt fields.
func (r *Robotstxt) assignValues(values ...interface{}) error {
	if m, n := len(values), len(robotstxt.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		r.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		r.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field host", values[2])
	} else if value.Valid {
		r.Host = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field scheme", values[3])
	} else if value.Valid {
		r.Scheme = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field response_url", values[4])
	} else if value.Valid {
		r.ResponseURL = value.String
	}
	if value, ok := values[5].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field body", values[5])
	} else if value != nil {
		r.Body = *value
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field statuscode", values[6])
	} else if value.Valid {
		r.Statuscode = int32(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field response_time", values[7])
	} else if value.Valid {
		r.ResponseTime = value.Int64
	}
	return nil
}

// Update returns a builder for updating this Robotstxt.
// Note that, you need to call Robotstxt.Unwrap() before calling this method, if this Robotstxt
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Robotstxt) Update() *RobotstxtUpdateOne {
	return (&RobotstxtClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Robotstxt) Unwrap() *Robotstxt {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Robotstxt is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Robotstxt) String() string {
	var builder strings.Builder
	builder.WriteString("Robotstxt(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", host=")
	builder.WriteString(r.Host)
	builder.WriteString(", scheme=")
	builder.WriteString(r.Scheme)
	builder.WriteString(", response_url=")
	builder.WriteString(r.ResponseURL)
	builder.WriteString(", body=")
	builder.WriteString(fmt.Sprintf("%v", r.Body))
	builder.WriteString(", statuscode=")
	builder.WriteString(fmt.Sprintf("%v", r.Statuscode))
	builder.WriteString(", response_time=")
	builder.WriteString(fmt.Sprintf("%v", r.ResponseTime))
	builder.WriteByte(')')
	return builder.String()
}

// Robotstxts is a parsable slice of Robotstxt.
type Robotstxts []*Robotstxt

func (r Robotstxts) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
